// Generated by CoffeeScript 1.10.0
var AppRegistry, Application, Component, React, ReactNative, ScrollView, StyleSheet, TabBarIOS, Task, TaskView, Text, TextInput, TodayView, View, styles,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

React = require("react");

Component = React.Component;

ReactNative = require("react-native");

AppRegistry = ReactNative.AppRegistry, TextInput = ReactNative.TextInput, View = ReactNative.View, Text = ReactNative.Text, StyleSheet = ReactNative.StyleSheet, ScrollView = ReactNative.ScrollView, TabBarIOS = ReactNative.TabBarIOS;

styles = (require("./styles.js")).styles;

TaskView = (require("./taskview.js")).TaskView;

Task = (require("./task.js")).Task;

TodayView = (function(superClass) {
  extend(TodayView, superClass);

  function TodayView(props) {
    this.updateText = bind(this.updateText, this);
    this.state = {
      text: 'Useless Multiline Placeholder',
      tasks: []
    };
  }

  TodayView.prototype.updateText = function(text) {
    var task;
    task = Task["new"](1, text, 0);
    return this.setState({
      text: ""
    });
  };

  TodayView.prototype.render = function() {
    var i, item, itemRenders, j, len, ref;
    itemRenders = [];
    ref = Task.allTasks();
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      item = ref[i];
      itemRenders.push(React.createElement(TaskView, {
        "key": i,
        "task": item
      }));
    }
    return React.createElement(ScrollView, null, itemRenders, React.createElement(TextInput, {
      "ref": 'Input',
      "style": {
        marginTop: 100,
        height: 200,
        borderColor: 'gray',
        borderWidth: 0
      },
      "onChangeText": ((function(_this) {
        return function(text) {
          return _this.setState({
            text: text
          });
        };
      })(this)),
      "onSubmitEditing": ((function(_this) {
        return function(event) {
          return _this.updateText(event.nativeEvent.text);
        };
      })(this)),
      "value": this.state.text
    }));
  };

  return TodayView;

})(Component);

Application = (function(superClass) {
  extend(Application, superClass);

  function Application(props) {
    Application.__super__.constructor.call(this, props);
    this.state = {
      selectedTab: 'today'
    };
  }

  Application.prototype.render = function() {
    return React.createElement(TabBarIOS, {
      "unselectedTintColor": "lightgray",
      "tintColor": "white",
      "barTintColor": "black"
    }, React.createElement(TabBarIOS.Item, {
      "title": "TODAY",
      "selected": this.state.selectedTab === 'today',
      "onPress": ((function(_this) {
        return function() {
          return _this.setState({
            selectedTab: 'today'
          });
        };
      })(this))
    }, React.createElement(TodayView, null)), React.createElement(TabBarIOS.Item, {
      "title": "MY LIST",
      "selected": this.state.selectedTab === 'mylist',
      "onPress": ((function(_this) {
        return function() {
          return _this.setState({
            selectedTab: 'mylist'
          });
        };
      })(this))
    }, React.createElement(View, null)), React.createElement(TabBarIOS.Item, {
      "title": "PROFILE"
    }, React.createElement(View, null)));
  };

  return Application;

})(Component);

AppRegistry.registerComponent('MeowNowHome', function() {
  return Application;
});
