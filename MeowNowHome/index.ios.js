// Generated by CoffeeScript 1.10.0
var AppRegistry, Application, Component, React, ReactNative, ScrollView, StyleSheet, TaskView, Text, TextInput, styles,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

React = require("react");

Component = React.Component;

ReactNative = require("react-native");

AppRegistry = ReactNative.AppRegistry, TextInput = ReactNative.TextInput, Text = ReactNative.Text, StyleSheet = ReactNative.StyleSheet, ScrollView = ReactNative.ScrollView;

TaskView = (function(superClass) {
  extend(TaskView, superClass);

  function TaskView() {
    return TaskView.__super__.constructor.apply(this, arguments);
  }

  TaskView.prototype.render = function() {
    return React.createElement(Text, {
      "style": styles.task
    }, this.props.text);
  };

  return TaskView;

})(Component);

Application = (function(superClass) {
  extend(Application, superClass);

  function Application(props) {
    this.updateText = bind(this.updateText, this);
    this.state = {
      text: 'Useless Multiline Placeholder',
      tasks: []
    };
  }

  Application.prototype.updateText = function(text) {
    return this.setState((function(_this) {
      return function(state) {
        state.tasks.push({
          text: text
        });
        return {
          text: "",
          tasks: state.tasks
        };
      };
    })(this));
  };

  Application.prototype.render = function() {
    var i, item, itemRenders, j, len, ref;
    itemRenders = [];
    ref = this.state.tasks;
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      item = ref[i];
      itemRenders.push(React.createElement(TaskView, {
        "key": i,
        "text": item.text
      }));
    }
    return React.createElement(ScrollView, null, itemRenders, React.createElement(TextInput, {
      "ref": 'Input',
      "style": {
        marginTop: 50,
        height: 200,
        borderColor: 'gray',
        borderWidth: 0
      },
      "onChangeText": ((function(_this) {
        return function(text) {
          return _this.setState({
            text: text
          });
        };
      })(this)),
      "onSubmitEditing": ((function(_this) {
        return function(event) {
          return _this.updateText(event.nativeEvent.text);
        };
      })(this)),
      "value": this.state.text
    }));
  };

  return Application;

})(Component);

styles = StyleSheet.create({
  heading: {
    fontSize: 42,
    textAlign: 'center',
    marginTop: 50
  },
  task: {
    fontSize: 24,
    marginTop: 15,
    marginLeft: 15,
    marginRight: 15,
    color: '#FFFFFF',
    backgroundColor: 'darkgray'
  }
});

AppRegistry.registerComponent('MeowNowHome', function() {
  return Application;
});
